/* Generated By:JavaCC: Do not edit this line. PDDL21ParserTokenManager.java */
package edu.asu.sapa.parsing;
import edu.asu.sapa.lifted.*;
import edu.asu.sapa.ground.GoalDep;
import edu.asu.sapa.muri.*;
import java.util.*;

/** Token Manager. */
public class PDDL21ParserTokenManager implements PDDL21ParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 2, 6);
      case 10:
         return jjStartNfaWithStates_1(0, 3, 6);
      case 12:
         return jjStartNfaWithStates_1(0, 5, 6);
      case 13:
         return jjStartNfaWithStates_1(0, 4, 6);
      case 32:
         return jjStartNfaWithStates_1(0, 1, 6);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xfffffcffffffffffL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(6);
                  }
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0xfffffcffffffffffL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 6:
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000L) != 0L)
            return 50;
         if ((active1 & 0x2L) != 0L)
            return 16;
         if ((active0 & 0x880000040000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 70;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 44;
         if ((active0 & 0x180L) != 0L)
         {
            jjmatchedKind = 69;
            return 34;
         }
         if ((active1 & 0x1L) != 0L)
            return 14;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 36;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 26;
         if ((active0 & 0x739f800083ffe00L) != 0L)
            return 12;
         if ((active0 & 0xa20000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 10;
         }
         if ((active0 & 0x4607f180000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 56;
         }
         return -1;
      case 1:
         if ((active0 & 0x8c607ebc0000100L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 56;
         }
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 33;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 51;
         }
         if ((active0 & 0x1020000000L) != 0L)
            return 56;
         return -1;
      case 2:
         if ((active0 & 0x8c607c140000180L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 56;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
            return 51;
         }
         if ((active0 & 0x2a80000000L) != 0L)
            return 56;
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 51;
         }
         if ((active0 & 0x806074040000180L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 56;
         }
         if ((active0 & 0xc0008100000000L) != 0L)
            return 56;
         return -1;
      case 4:
         if ((active0 & 0x6074000000180L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
            return 56;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
            return 51;
         }
         if ((active0 & 0x800000040000000L) != 0L)
            return 56;
         return -1;
      case 5:
         if ((active0 & 0x6040000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
            return 56;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
            return 51;
         }
         if ((active0 & 0x34000000180L) != 0L)
            return 56;
         return -1;
      case 6:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
            return 51;
         }
         if ((active0 & 0x6000000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
            return 56;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 56;
         return -1;
      case 7:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
            return 51;
         }
         if ((active0 & 0x6000000000000L) != 0L)
            return 56;
         return -1;
      case 8:
         if ((active0 & 0x10000000L) != 0L)
            return 51;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         return jjStartNfaWithStates_0(0, 64, 14);
      case 43:
         return jjStartNfaWithStates_0(0, 62, 26);
      case 44:
         return jjStopAtPos(0, 70);
      case 45:
         return jjStartNfaWithStates_0(0, 63, 36);
      case 47:
         return jjStartNfaWithStates_0(0, 65, 16);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x739f800083ffe00L);
      case 61:
         return jjStartNfaWithStates_0(0, 61, 44);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 91:
         return jjStopAtPos(0, 73);
      case 93:
         return jjStopAtPos(0, 74);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xa20000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x30080000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x6000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1100000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x880000040000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 123:
         return jjStopAtPos(0, 71);
      case 125:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000000004000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xc1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80018008000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000000200080L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4820000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000200000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000880000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80506000000100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000122000L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 56);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100010000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000040030000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 68:
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 56);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 56);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x19008100000400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000200080L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 56);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x804800000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4002c00000c1000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40004000102000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x18008200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x204000000100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 68:
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x200400000102000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x6800000000080L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000081200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000058038000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800010000040000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000004000L);
      case 87:
      case 119:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x120080018028000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x82000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x120000200800L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000004100L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000080L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 56);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000200000L);
      case 69:
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x7080000082400L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 56);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x104000L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 56);
         break;
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 56);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x308000018009200L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 67:
      case 99:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 51);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x18008200L);
      case 76:
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 77:
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 56);
         break;
      case 78:
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(6, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(6, 57);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000080000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 56);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x18000200L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x28000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(8, 53);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 51);
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2400L);
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(9, 19);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 83:
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(10, 13);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(10, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         break;
      case 83:
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(15, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 80;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(59);
                  }
                  break;
               case 34:
               case 56:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(56);
                  break;
               case 33:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(56);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(58, 60);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 61)
                     jjCheckNAdd(44);
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 60)
                     jjCheckNAdd(44);
                  else if (curChar == 62)
                     jjCheckNAdd(44);
                  else if (curChar == 48)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 10:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(56);
                  break;
               case 70:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(56);
                  break;
               case 0:
                  if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 13:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 61 && kind > 23)
                     kind = 23;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 17:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 26:
                  if (curChar == 61 && kind > 25)
                     kind = 25;
                  break;
               case 27:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 37:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 48 && kind > 60)
                     kind = 60;
                  break;
               case 39:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if (curChar == 61 && kind > 66)
                     kind = 66;
                  break;
               case 45:
                  if (curChar == 62)
                     jjCheckNAdd(44);
                  break;
               case 46:
                  if (curChar == 60)
                     jjCheckNAdd(44);
                  break;
               case 47:
                  if (curChar == 61)
                     jjCheckNAdd(44);
                  break;
               case 48:
                  if ((0x5000000000000000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 49:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 51:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 52:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 54:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(58, 60);
                  break;
               case 58:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(62);
                  break;
               case 66:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 75:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(56);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(56);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(56);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(3, 4);
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(56);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(56);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 6:
                  if ((0x400000004000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 7:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 19:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 29:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(51);
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(56);
                  break;
               case 63:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 64:
                  if ((0x1000000010000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 65:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x400000004000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 72:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 80 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 70, 79, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\75", "\53", "\55", "\52", "\57", null, null, 
null, null, "\54", "\173", "\175", "\133", "\135", "\50", "\51", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "Requirement",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   0, 0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[80];
static private final int[] jjstateSet = new int[160];
static protected char curChar;
/** Constructor. */
public PDDL21ParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PDDL21ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 80; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
